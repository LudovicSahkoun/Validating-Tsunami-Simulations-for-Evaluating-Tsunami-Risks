#  ----- For developers ----- 
    # Toggle debugging print statements:
    amrdata.dprint = False      # print domain flags
    amrdata.eprint = False      # print err est flags
    amrdata.edebug = False      # even more err est flags
    amrdata.gprint = False      # grid bisection/clustering
    amrdata.nprint = False      # proper nesting output
    amrdata.pprint = False      # proj. of tagged points
    amrdata.rprint = False      # print regridding summary
    amrdata.sprint = False      # space/memory output
    amrdata.tprint = True       # time step reporting each level
    amrdata.uprint = False      # update/upbnd reporting
    
    # More AMR parameters can be set -- see the defaults in pyclaw/data.py

    # ---------------
    # Regions:
    # ---------------
    rundata.regiondata.regions = []
    # to specify regions of refinement append lines of the form
    #  [minlevel,maxlevel,t1,t2,x1,x2,y1,y2]
    # X is longitude (east, west)
    # Y is latitude (north, south)

    # rundata.regiondata.regions.append([3, 3, 0., 10000., -77,-67,-40,-30])
    # X is longitude (east, west)
    # Y is latitude (north, south)
    rundata.regiondata.regions.append([1, 2, 0, 1e9, clawdata.lower[0],clawdata.upper[0],clawdata.lower[1],clawdata.upper[1]]) # Low res area
    rundata.regiondata.regions.append([3, 3, 0, 1e9, 7.4021982,7.5011229,43.6887420,43.7574359]) # Med Res Monaco
    rundata.regiondata.regions.append([4, 4, 0, 1e9, 7.4021982,7.4472402,43.7196129,43.7574359]) # High Res Monaco

    # ---------------
    # Gauges:
    # ---------------
    rundata.gaugedata.gauges = []
    # for gauges append lines of the form  [gaugeno, x, y, t1, t2]
    # Test gauge
    # rundata.gaugedata.gauges.append([691, 7.408772925925926, 43.721117925925924, 0., 1.e9])
    # Real gauges
    filename = 'Monaco_NetLogo_gauges.txt'
    with open(filename) as file:
        lines = file.readlines()
        for line in lines:
            # eval method to avoid the ' symbols being written to the gauges list!
            rundata.gaugedata.gauges.append(eval(line))
        
    return rundata
    # end of function setrun
    # ----------------------
